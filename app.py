# app.py

import streamlit as st
import sympy as sp
import pandas as pd
from metodos_numericos import f_exemplo, f_bacterias, f_estrutura, comparar_metodos

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="CalculusFlow",
    page_icon="‚ö°",
    layout="wide"
)

# --- CABE√áALHO E INTRODU√á√ÉO ---
st.title("‚ö° CalculusFlow")
st.subheader("Sua calculadora interativa para Zeros de Fun√ß√µes")
st.markdown("""
Bem-vindo ao **CalculusFlow**, o primeiro produto da nossa empresa fict√≠cia de educa√ß√£o!

Esta ferramenta foi criada para o projeto de C√°lculo Num√©rico e permite que voc√™ resolva equa√ß√µes
complexas e compare a efici√™ncia de quatro m√©todos iterativos cl√°ssicos. Explore, aprenda e veja
o poder da matem√°tica aplicada em a√ß√£o!
""")
st.divider()

# --- BARRA LATERAL COM AS ENTRADAS DO USU√ÅRIO ---
with st.sidebar:
    st.header("‚öôÔ∏è Painel de Controle")

    # Dicion√°rio para mapear as escolhas do usu√°rio √†s fun√ß√µes
    problemas_disponiveis = {
        "Exemplo: Potencial Magn√©tico": f_exemplo,
        "Problema 1: Concentra√ß√£o de Bact√©rias": f_bacterias,
        "Problema 2: Deslocamento de Estruturas": f_estrutura
    }
    problema_selecionado = st.selectbox(
        "1. Escolha o problema a ser resolvido:",
        list(problemas_disponiveis.keys())
    )
    funcao_escolhida = problemas_disponiveis[problema_selecionado]

    st.subheader("2. Defina os Par√¢metros")
    # Usando colunas para organizar os inputs
    col1, col2 = st.columns(2)
    with col1:
        a = st.number_input("In√≠cio do Intervalo (a)", value=0.0, format="%.2f")
        x0 = st.number_input("Estimativa Inicial (x‚ÇÄ)", value=1.0, format="%.2f")

    with col2:
        b = st.number_input("Fim do Intervalo (b)", value=5.0, format="%.2f")
        x1 = st.number_input("Segunda Estimativa (x‚ÇÅ)", value=2.0, format="%.2f")

    st.subheader("3. Ajustes de Precis√£o")
    tol = st.number_input("Toler√¢ncia (ex: 1e-6)", value=1e-6, format="%e")
    max_iter = st.number_input("M√°ximo de Itera√ß√µes", value=100, min_value=1, step=1)

    # Bot√£o para executar o c√°lculo
    calcular = st.button("üöÄ Comparar M√©todos", use_container_width=True, type="primary")


# --- √ÅREA PRINCIPAL PARA EXIBIR OS RESULTADOS ---
if calcular:
    st.header("üìä Resultados Comparativos")

    # L√≥gica para obter a derivada simbolicamente para Newton-Raphson
    df_simbolica = None
    if problema_selecionado == "Exemplo: Potencial Magn√©tico":
        x = sp.symbols('x')
        df_simbolica = sp.lambdify(x, sp.diff(x**3 - 5*x**2 + 8*x - 4, x))
    elif problema_selecionado == "Problema 1: Concentra√ß√£o de Bact√©rias":
        t = sp.symbols('t')
        df_simbolica = sp.lambdify(t, sp.diff(80 * sp.exp(-2*t) + 20 * sp.exp(-0.1*t) - 10, t))
    elif problema_selecionado == "Problema 2: Deslocamento de Estruturas":
        t = sp.symbols('t')
        df_simbolica = sp.lambdify(t, sp.diff(10 * sp.exp(-0.5*t) * sp.cos(2*t) - 5, t))

    # Chama a fun√ß√£o principal com todos os par√¢metros
    with st.spinner('Calculando... os computadores est√£o a todo vapor!'):
        resultados = comparar_metodos(
            f=funcao_escolhida,
            df=df_simbolica,
            a=a, b=b,
            x0=x0, x1=x1,
            tol=tol,
            max_iter=max_iter
        )

    # Exibe os resultados em uma tabela bonita (DataFrame do Pandas)
    df_resultados = pd.DataFrame(resultados)
    st.dataframe(df_resultados, use_container_width=True)

    st.divider()

    # --- AN√ÅLISE EDUCACIONAL DOS RESULTADOS ---
    st.header("üß† An√°lise dos Resultados")
    st.markdown("""
    A tabela acima mostra o desempenho de cada m√©todo. O que podemos aprender com isso?

    - **Velocidade de Converg√™ncia (Itera√ß√µes):**
      - **Newton-Raphson** √© geralmente o campe√£o em velocidade, convergindo com o menor n√∫mero de itera√ß√µes. Isso ocorre porque ele usa a informa√ß√£o da derivada (a inclina√ß√£o da curva) para dar "saltos" mais inteligentes em dire√ß√£o √† raiz.
      - A **Secante** √© uma √≥tima alternativa quando a derivada √© dif√≠cil de calcular, sendo quase t√£o r√°pida quanto Newton.
      - **Bissec√ß√£o** e **Falsa Posi√ß√£o** s√£o mais lentos e previs√≠veis, pois "prendem" a raiz em um intervalo que diminui a cada passo.

    - **Robustez (Confian√ßa no Resultado):**
      - Os m√©todos de intervalo (**Bissec√ß√£o** e **Falsa Posi√ß√£o**) s√£o muito robustos. Se voc√™ fornecer um intervalo `[a, b]` onde a fun√ß√£o muda de sinal, eles *garantem* que encontrar√£o uma raiz.
      - **Newton** e a **Secante** podem falhar (divergir) se a estimativa inicial for ruim ou se a fun√ß√£o tiver um comportamento inadequado (como derivadas pr√≥ximas de zero).

    - **Custo Computacional (Tempo):**
      - Embora o tempo de execu√ß√£o seja muito r√°pido para estas fun√ß√µes, em problemas de engenharia muito complexos, o custo de calcular a derivada para o m√©todo de Newton pode torn√°-lo mais "caro" que o m√©todo da Secante.

    **Conclus√£o:** N√£o existe um "m√©todo perfeito". A escolha depende do problema: se voc√™ precisa de garantia e robustez, use a Bissec√ß√£o. Se precisa de velocidade m√°xima e pode calcular a derivada, Newton-Raphson √© a escolha.
    """)

else:
    st.info("Ajuste os par√¢metros na barra lateral √† esquerda e clique em 'Comparar M√©todos' para iniciar.")
